import { FastifyInstance, FastifyRequest, FastifyReply } from 'fastify';
import * as dotenv from 'dotenv';
import type { Backend } from '../types/schema-dts'; // Import from generated types
// Import the storage interface
import { IBackendStorage } from './backendStorage';

// Extend FastifyInstance types
declare module 'fastify' {
  interface FastifyInstance {
    backendStorage: IBackendStorage;
    // libraryManager might also be here from previous steps
  }
}

export async function registerBackendRoutes(app: FastifyInstance) {
  dotenv.config(); // Keep dotenv config if needed elsewhere

  // BackendStorage is now decorated onto the app instance in src/index.ts

  // List Backends
  app.get<{ Reply: Backend[] }>(`/backends`, {
    schema: {
      tags: ['Backend'],
      operationId: 'listBackends'
    }
  }, async (request: FastifyRequest, reply: FastifyReply) => {
    try {
        const allBackends = await app.backendStorage.getAllBackends();
        // Exclude sensitive info before sending
        const safeBackends = allBackends.map(backend => {
          const { username, password, ...safeBackend } = backend;
          return safeBackend;
        });
        reply.send(safeBackends);
    } catch (error) {
        const errorMessage = error instanceof Error ? error.message : 'Failed to list backends.';
        console.error('Error listing backends:', error);
        reply.status(500).send({ error: errorMessage });
    }
  });

  // Add Backend
  app.post<{ Body: Omit<Backend, 'id'> }>(`/backends`, { // Use Omit<Backend, 'id'> for body type
    schema: {
      tags: ['Backend'],
      operationId: 'addBackend',
      body: {
        type: 'object',
        title: 'AddBackendBody',
        description: 'Request body for adding a new SPARQL backend',
        properties: {
          name: { type: 'string', description: 'The name of the backend' },
          endpoint: { type: 'string', description: 'The SPARQL endpoint URL' },
          username: { type: 'string', description: 'Optional username for the SPARQL endpoint' },
          password: { type: 'string', description: 'Optional password for the SPARQL endpoint' },
          description: { type: 'string', description: 'Optional description of the backend' }
        },
        required: ['name', 'endpoint']
      }
    }
  }, async (request: FastifyRequest<{ Body: Omit<Backend, 'id'> }>, reply: FastifyReply) => {
    try {
        // Use backendStorage to add
        const newBackend = await app.backendStorage.addBackend(request.body);
        // Return the newly created backend (excluding sensitive info)
        const { username, password, ...safeBackend } = newBackend;
        reply.status(201).send(safeBackend); // Return 201 Created
    } catch (error) {
        const errorMessage = error instanceof Error ? error.message : 'Failed to add backend.';
        console.error('Error adding backend:', error);
        reply.status(500).send({ error: errorMessage });
    }
  });

  // Get Backend by ID
  app.get<{ Params: { id: string } }>(`/backends/:id`, {
    schema: {
      tags: ['Backend'],
      operationId: 'getBackendById',
      params: {
        type: 'object',
        properties: {
          id: { type: 'string', description: 'The ID of the backend to retrieve' }
        },
        required: ['id']
      }
    }
  }, async (request: FastifyRequest<{ Params: { id: string } }>, reply: FastifyReply) => {
    const { id: iri } = request.params; // Rename id to iri for clarity
    try {
        const backend = await app.backendStorage.getBackendByIRI(iri); // Use getBackendByIRI
        if (!backend) {
          return reply.status(404).send({ error: 'Backend not found' });
        }
        // Exclude sensitive info before sending
        const { username, password, ...safeBackend } = backend;
        return safeBackend;
    } catch (error) {
        const errorMessage = error instanceof Error ? error.message : 'Failed to get backend.';
        console.error(`Error getting backend ${iri}:`, error); // Use iri in log
        reply.status(500).send({ error: errorMessage });
    }
  });

   // Update Backend
   app.put<{ Params: { id: string }, Body: Partial<Omit<Backend, '@id'>> }>(`/backends/:id`, { // Use Omit<Backend, '@id'>
    schema: {
      tags: ['Backend'],
      operationId: 'updateBackend',
      params: {
        type: 'object',
        properties: { id: { type: 'string' } },
        required: ['id']
      },
      body: { // Allow partial updates
        type: 'object',
        title: 'UpdateBackendBody',
        properties: {
          name: { type: 'string' },
          endpoint: { type: 'string' },
          username: { type: 'string', nullable: true }, // Allow null to clear
          password: { type: 'string', nullable: true }, // Allow null to clear
          description: { type: 'string', nullable: true } // Allow null to clear
        },
        // No required fields, as it's a partial update
      }
    }
  }, async (request: FastifyRequest<{ Params: { id: string }, Body: Partial<Omit<Backend, '@id'>> }>, reply: FastifyReply) => { // Use Omit<Backend, '@id'>
    const { id: iri } = request.params; // Rename id to iri
    try {
        const updatedBackend = await app.backendStorage.updateBackend(iri, request.body); // Use iri
        if (!updatedBackend) {
            return reply.status(404).send({ error: 'Backend not found' });
        }
        const { username, password, ...safeBackend } = updatedBackend;
        return safeBackend;
    } catch (error) {
        const errorMessage = error instanceof Error ? error.message : 'Failed to update backend.';
        console.error(`Error updating backend ${iri}:`, error); // Use iri in log
        reply.status(500).send({ error: errorMessage });
    }
  });


  // Delete Backend
  app.delete<{ Params: { id: string } }>(`/backends/:id`, { // Keep :id in route for consistency, but treat as IRI
    schema: {
      tags: ['Backend'],
      operationId: 'deleteBackend',
      params: {
        type: 'object',
        properties: {
          id: { type: 'string' }
        },
        required: ['id']
      }
    }
  }, async (request: FastifyRequest<{ Params: { id: string } }>, reply: FastifyReply) => {
    const { id: iri } = request.params; // Treat id param as IRI
    try {
        const deleted = await app.backendStorage.deleteBackend(iri); // Use iri
        if (deleted) {
            reply.status(204).send(); // Success, no content
        } else {
            reply.status(404).send({ error: 'Backend not found' });
        }
    } catch (error) {
        const errorMessage = error instanceof Error ? error.message : 'Failed to delete backend.';
        console.error(`Error deleting backend ${iri}:`, error); // Use iri in log
        reply.status(500).send({ error: errorMessage });
    }
  });

  // REMOVED: Set Current Backend (PUT /backends/current)
  // REMOVED: Get Current Backend (GET /backends/current)
  // The concept of a "current" backend needs to be handled per-request/session,
  // not as a global state modified via these routes. The query execution logic
  // will need updating separately to determine which backend to use.

}
