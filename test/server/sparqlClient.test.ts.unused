import { executeQuery } from '../../src/server/sparqlClient'; // Updated import path
import { IBackendStorage } from '../../src/server/backendStorage';
import { Backend } from '../../src/types';
import { request } from 'undici'; // Import request to mock it
import { SparqlQueryParser } from '../../src/lib/parser'; // Import parser for generating expected query
import { config as appConfig } from '../../src/server/config'; // Import actual config

// Mock the undici request function
jest.mock('undici', () => ({
  request: jest.fn(),
}));

// Mock the config
jest.mock('../../src/server/config', () => ({
  config: {
    enableTimingLogs: false, // Disable timing logs for tests by default
  },
}));

// Helper to create a mock storage conforming to IBackendStorage
const createMockStorage = (backend: Backend | null): IBackendStorage => ({
  getAllBackends: jest.fn(),
  getBackendById: jest.fn().mockResolvedValue(backend),
  addBackend: jest.fn(),
  updateBackend: jest.fn(),
  deleteBackend: jest.fn(),
  // Removed methods not in IBackendStorage:
  // setCurrentBackend, getCurrentBackend, getCurrentBackendId, loadAndSetInitialCurrent
});

describe('executeQuery', () => {
  const mockRequest = request as jest.Mock; // Type cast for mocked function

  beforeEach(() => {
    // Reset mocks before each test
    jest.clearAllMocks();
    // Reset config mock if needed for specific tests
    jest.mock('../../src/server/config', () => ({
      config: {
        enableTimingLogs: false,
      },
    }));
  });

  const backendId = 'test-backend';
  const sparqlQuery = 'SELECT * WHERE { ?s ?p ?o } LIMIT 10';
  const backend: Backend = { id: backendId, name: 'Test', endpoint: 'http://localhost:7200/repositories/test', username: '', password: '' };
  const backendWithAuth: Backend = { ...backend, username: 'user', password: 'password' };

  // Helper to create a mock undici response
  const createMockUndiciResponse = (statusCode: number, bodyJson: any) => ({
    statusCode: statusCode,
    headers: { 'content-type': 'application/sparql-results+json' },
    // Mock the body property which should have a json() method
    body: {
      json: jest.fn().mockResolvedValue(bodyJson),
      // Add other body methods if needed (e.g., text(), arrayBuffer())
    },
  });

  it('should execute a simple query successfully', async () => {
    const mockStorage = createMockStorage(backend);
    const mockResponse = createMockUndiciResponse(200, { results: { bindings: [] } });
    mockRequest.mockResolvedValue(mockResponse);

    // Use the parser to generate the string as it would be after potential parsing/regeneration
    const parser = new SparqlQueryParser();
    const parsedQueryObj = parser.parseQuery(sparqlQuery);
    const regeneratedQueryString = parser['generator'].stringify(parsedQueryObj); // Access private generator for test

    // Pass the backend object directly
    const response = await executeQuery(backend, sparqlQuery);

    // executeQuery no longer calls getBackendById
    // expect(mockStorage.getBackendById).toHaveBeenCalledWith(backendId);
    expect(mockRequest).toHaveBeenCalledWith(backend.endpoint, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Accept': 'application/sparql-results+json',
      },
      // Compare against the regenerated query string
      body: `query=${encodeURIComponent(regeneratedQueryString)}`,
    });
    expect(response).toBe(mockResponse); // Should return the undici response object
    // Optionally check if body.json() was called if the function itself processed it
    // expect(mockResponse.body.json).toHaveBeenCalled();
  });

  // This test is no longer relevant as executeQuery expects a valid Backend object
  // and doesn't fetch it from storage itself. The responsibility of ensuring
  // the backend exists lies with the caller.
  // it('should throw an error if backend is not found', async () => { ... });

  it('should include Authorization header when backend has credentials', async () => {
    // No storage needed here as backend is passed directly
    // const mockStorage = createMockStorage(backendWithAuth);
    const mockResponse = createMockUndiciResponse(200, { results: { bindings: [] } });
    mockRequest.mockResolvedValue(mockResponse);

    // Pass backendWithAuth directly
    await executeQuery(backendWithAuth, sparqlQuery);

    // executeQuery no longer calls getBackendById
    // expect(mockStorage.getBackendById).toHaveBeenCalledWith(backendId);
    const expectedAuth = `Basic ${Buffer.from('user:password').toString('base64')}`;
    expect(mockRequest).toHaveBeenCalledWith(backendWithAuth.endpoint, expect.objectContaining({
      headers: expect.objectContaining({
        'Authorization': expectedAuth,
      }),
    }));
  });

  it('should apply variable bindings to the query', async () => {
    // No storage needed
    // const mockStorage = createMockStorage(backend);
    const mockResponse = createMockUndiciResponse(200, { results: { bindings: [] } });
    mockRequest.mockResolvedValue(mockResponse);
    // Query now uses VALUES for binding
    const queryWithVar = 'SELECT * WHERE { VALUES ?target_p { UNDEF } ?s ?p ?o . FILTER(?p = ?target_p) }';
    // Bindings structure matching SPARQL JSON results format
    const bindings = {
        head: { vars: ["target_p"] },
        results: {
            bindings: [
                { target_p: { type: 'uri', value: 'http://example.com/prop' } }
            ]
        }
    };

    // Generate the expected query string after binding using the parser
    const parser = new SparqlQueryParser();
    const expectedBoundQuery = parser.applyBindings(queryWithVar, bindings);

    // Pass backend object and bindings correctly
    await executeQuery(backend, queryWithVar, bindings);

    // executeQuery no longer calls getBackendById
    expect(mockRequest).toHaveBeenCalledWith(backend.endpoint, expect.objectContaining({
      body: `query=${encodeURIComponent(expectedBoundQuery)}`, // Compare against parser-generated string
    }));
  });

  it('should re-throw errors from undici request', async () => {
    // No storage needed
    // const mockStorage = createMockStorage(backend);
    const requestError = new Error('Network Error');
    mockRequest.mockRejectedValue(requestError);

    // Pass backend object directly
    await expect(executeQuery(backend, sparqlQuery)).rejects.toThrow(requestError);
    // executeQuery no longer calls getBackendById
    // expect(mockStorage.getBackendById).toHaveBeenCalledWith(backendId);
    expect(mockRequest).toHaveBeenCalled();
  });

  it('should enable timing logs when config is set', async () => {
    // Temporarily modify the actual imported config for this test
    const originalTimingSetting = appConfig.enableTimingLogs;
    appConfig.enableTimingLogs = true;

    const consoleTimeSpy = jest.spyOn(console, 'time');
    const consoleTimeEndSpy = jest.spyOn(console, 'timeEnd');

    // No storage needed
    // const mockStorage = createMockStorage(backend);
    const mockResponse = createMockUndiciResponse(200, { results: { bindings: [] } });
    mockRequest.mockResolvedValue(mockResponse);

    try {
      // Use the standard executeQuery, it will read the modified appConfig
      // Pass backend object and variables correctly
      await executeQuery(backend, sparqlQuery, { some: 'var' });

      expect(consoleTimeSpy).toHaveBeenCalledWith('Variable substitution');
      expect(consoleTimeEndSpy).toHaveBeenCalledWith('Variable substitution');
    } finally {
      // Restore original config value and spies regardless of test outcome
      appConfig.enableTimingLogs = originalTimingSetting;
      consoleTimeSpy.mockRestore();
      consoleTimeEndSpy.mockRestore();
    }
  });

});
